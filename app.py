# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M-U0OwwIiLSAzMJIihr00ceVOon53P_f
"""

code = '''
import streamlit as st
import json
from datetime import datetime

# Simulated shared memory (in place of Redis or DB)
if "memory" not in st.session_state:
    st.session_state.memory = []

st.title("üìÇ Multi-Agent AI Classifier System")

# Input
input_text = st.text_area("Paste your Email / JSON content here", height=250)

if st.button("üîç Classify and Process"):
    input_type = "Unknown"
    intent = "Unknown"
    extracted = {}

    try:
        # Try parsing JSON
        parsed_json = json.loads(input_text)
        input_type = "JSON"

        # Intent detection (very basic)
        if "invoice" in json.dumps(parsed_json).lower():
            intent = "Invoice"
        elif "rfq" in json.dumps(parsed_json).lower():
            intent = "RFQ"
        else:
            intent = "General JSON"

        # Simulated JSON Agent behavior
        extracted["fields"] = list(parsed_json.keys())

    except:
        if "from:" in input_text.lower():
            input_type = "Email"

            if "complaint" in input_text.lower():
                intent = "Complaint"
            elif "rfq" in input_text.lower():
                intent = "RFQ"
            elif "invoice" in input_text.lower():
                intent = "Invoice"
            else:
                intent = "General Email"

            # Simulated Email Agent behavior
            lines = input_text.splitlines()
            for line in lines:
                if line.lower().startswith("from:"):
                    extracted["sender"] = line.split(":", 1)[1].strip()
                elif line.lower().startswith("subject:"):
                    extracted["subject"] = line.split(":", 1)[1].strip()

        else:
            input_type = "Plain Text"
            intent = "Unknown"

    # Store to memory
    log = {
        "source_type": input_type,
        "intent": intent,
        "timestamp": str(datetime.now()),
        "extracted": extracted
    }

    st.session_state.memory.append(log)

    st.success(f"‚úÖ Detected Type: {input_type}, Intent: {intent}")

    if extracted:
        st.subheader("üì§ Extracted Information")
        st.json(extracted)

# Memory Log
if st.session_state.memory:
    st.subheader("üß† Memory Log")
    for i, log in enumerate(reversed(st.session_state.memory)):
        st.markdown(f"""
        **{i+1}. Source:** {log['source_type']}
        **Intent:** {log['intent']}
        **Time:** {log['timestamp']}
        **Extracted:** `{log['extracted']}`
        ---
        """)
'''

# Save as app.py
with open("app.py", "w") as f:
    f.write(code)